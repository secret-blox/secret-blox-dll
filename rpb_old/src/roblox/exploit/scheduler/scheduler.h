#pragma once
#include <Windows.h>
#include <cstdint>
#include <vector>
#include <string_view>

#include <roblox/miscellaneous/offsets/addresses.h>
#include <roblox/security/obfuscation/string.h>

struct lua_State;
namespace module {
	class scheduler {
		static scheduler* singleton;
		std::uintptr_t taskScheduler{ 0 };
		std::vector<std::uintptr_t> jobVector{};
	public:
		using jobType = std::uintptr_t(__fastcall*)(std::uintptr_t);
	public:
		static auto getSingleton() -> scheduler*;
		explicit scheduler();
		auto reInitialize() -> void; /* used in teleport handler */

		auto getJobName(std::uintptr_t job) -> std::string;
		auto getJob(std::string_view name) -> std::uintptr_t;
		auto jobHook(void* hookFunc) -> std::uintptr_t;

		auto setFps(double fps) -> void;
		auto getFps() -> double;

		auto getScriptJob() -> std::intptr_t;
		auto getScriptContext(std::intptr_t scriptJob = -1) -> std::intptr_t;
		auto getDataModel(std::intptr_t scriptJob = -1) -> std::intptr_t;
		auto getLuaState(std::intptr_t context = -1) -> lua_State*;

		auto getRawDataModel() -> std::uintptr_t;
		auto isLoaded() -> bool;
	};
}